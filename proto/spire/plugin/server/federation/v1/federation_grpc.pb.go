// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package federationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FederationClient is the client API for Federation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederationClient interface {
	// PushBundle send bundle to Galadriel Server
	PushBundle(ctx context.Context, in *PushBundleRequest, opts ...grpc.CallOption) (*PushBundleResponse, error)
	ApproveRelationship(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipResponse, error)
}

type federationClient struct {
	cc grpc.ClientConnInterface
}

func NewFederationClient(cc grpc.ClientConnInterface) FederationClient {
	return &federationClient{cc}
}

func (c *federationClient) PushBundle(ctx context.Context, in *PushBundleRequest, opts ...grpc.CallOption) (*PushBundleResponse, error) {
	out := new(PushBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.plugin.server.federation.v1.Federation/PushBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationClient) ApproveRelationship(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipResponse, error) {
	out := new(RelationshipResponse)
	err := c.cc.Invoke(ctx, "/spire.plugin.server.federation.v1.Federation/ApproveRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederationServer is the server API for Federation service.
// All implementations must embed UnimplementedFederationServer
// for forward compatibility
type FederationServer interface {
	// PushBundle send bundle to Galadriel Server
	PushBundle(context.Context, *PushBundleRequest) (*PushBundleResponse, error)
	ApproveRelationship(context.Context, *RelationshipRequest) (*RelationshipResponse, error)
	mustEmbedUnimplementedFederationServer()
}

// UnimplementedFederationServer must be embedded to have forward compatible implementations.
type UnimplementedFederationServer struct {
}

func (UnimplementedFederationServer) PushBundle(context.Context, *PushBundleRequest) (*PushBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBundle not implemented")
}
func (UnimplementedFederationServer) ApproveRelationship(context.Context, *RelationshipRequest) (*RelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRelationship not implemented")
}
func (UnimplementedFederationServer) mustEmbedUnimplementedFederationServer() {}

// UnsafeFederationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederationServer will
// result in compilation errors.
type UnsafeFederationServer interface {
	mustEmbedUnimplementedFederationServer()
}

func RegisterFederationServer(s grpc.ServiceRegistrar, srv FederationServer) {
	s.RegisterService(&Federation_ServiceDesc, srv)
}

func _Federation_PushBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationServer).PushBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.plugin.server.federation.v1.Federation/PushBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationServer).PushBundle(ctx, req.(*PushBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Federation_ApproveRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationServer).ApproveRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.plugin.server.federation.v1.Federation/ApproveRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationServer).ApproveRelationship(ctx, req.(*RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Federation_ServiceDesc is the grpc.ServiceDesc for Federation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Federation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spire.plugin.server.federation.v1.Federation",
	HandlerType: (*FederationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushBundle",
			Handler:    _Federation_PushBundle_Handler,
		},
		{
			MethodName: "ApproveRelationship",
			Handler:    _Federation_ApproveRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/plugin/server/federation/v1/federation.proto",
}
